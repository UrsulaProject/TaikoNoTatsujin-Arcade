//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

@class BGDownload, CADisplayLink, EAGLContext, ISceneBase, LumenManager, NSArray, NSDictionary, NSMutableArray, NSString, TaikoEquipmentManager, TaikoRenderer, TaikoUpdateChecker, TaikoViewController;

@interface ISceneManager
{
    EAGLContext *m_EAGLContext;
    unsigned int m_GLDefaultFramebuffer;
    unsigned int m_GLColorRenderbuffer;
    float m_Width;
    float m_Height;
    CADisplayLink *m_DisplayLink;
    unsigned long m_TouchState;
    unsigned long m_TouchCancelled;
    NSString *m_SongDirectoryPath;
    NSString *m_CollaboDirectoryPath;
    float m_loadProgressSongInfo;
    BOOL m_loadedSongInfo;
    NSMutableArray *m_SongInfoArray;//List Of Objects With Type ISongInfo
    int m_CurrentCourse;
    NSString *m_CurrentSongID;
    int m_NextSceneIndex;
    int m_CurrentSceneIndex;
    int m_PrevSceneIndex;
    ISceneBase *m_CurrentScene;
    ISceneBase *m_nextScene;
    int m_SceneArgument;
    BOOL m_autoMode;
    int m_PlayerLevel;
    int m_PlayerNextClass;
    int m_GameResultDonPoints;
    int m_GameResultScore;
    int m_GameResultMaxCombo;
    int m_GameResultHitRate;
    int m_GameResultMeter;
    int m_GameResultMeterLimit;
    int m_GameResultMeterMax;
    int m_GameResultNumJudge[3];
    int m_GameResultKanpekiFailed;
    int m_GameResultPlayCount;
    int m_GameResultRendaCount;
    BOOL m_GameResultFullCombo;
    BOOL m_GameResultNewRecord;
    BOOL m_GameResultDailyRecord;
    NSDictionary *m_MusicDictionary;
    unsigned int m_GameOptions;
    double m_LastTimestamp;
    unsigned int m_DownLoadDataTotal;
    unsigned int m_DownLoadDataCount;
    NSDictionary *m_SNSDictionary;
    NSMutableArray *m_PendingTransactions;
    NSDictionary *m_SodemakuDictionary;
    NSArray *m_MovableCollaboIdentifiers;
    TaikoViewController *m_TaikoViewController;
    BOOL m_NeedsResumeSound;
    BGDownload *m_TitleImageDownload;
    BGDownload *m_SpeechBubbleImageDownload;
    BGDownload *m_AdImageDownloads[10];
    BOOL m_IdleTimerDisabled;
    BOOL m_GaveUpToLogin;
    int m_PreservedDontamaPoint;
    int m_PreservedBonusPoint;
    int m_CollaboImageDownloadingCount;
    BOOL m_CurrentSongIsValid;
    BOOL m_IsChecking;
    BOOL _gameResultSoundUnlocked;
    BOOL _exerciseGaveUp;
    int m_RemoteNotificationStartType;
    TaikoRenderer *taikoRenderer_;
    LumenManager *lumenManager_;
    int _currentSongType;
    id _sceneMessage;
    float _UIKitScaleFactor;
    int _courseForRanking;
    int _lastLayer;
    int _workingLayer;
    int _sceneIndexRecommendedMove;
    TaikoEquipmentManager *_equipmentManager;
    TaikoUpdateChecker *_updateChecker;
    unsigned int _collaboCommunicationState;
    NSString *_titleBannerImageCacheKey;
}

+ (id)musicFileNameWithIdentifier:(id)arg1;
+ (BOOL)checkTimeLimit:(id)arg1;
+ (id)convertNameNumbers:(unsigned int *)arg1 length:(unsigned int)arg2;
+ (int)nameLengthWithNameString:(id)arg1;
+ (unsigned long long)convertNameString:(id)arg1;
+ (id)createDirectoryInDocuments:(id)arg1 backupSkip:(BOOL)arg2;
+ (BOOL)addSkipBackupAttributeToItemAtPath:(id)arg1;
@property(readonly, nonatomic) BOOL gameResultSoundUnlocked; // @synthesize gameResultSoundUnlocked=_gameResultSoundUnlocked;
@property(retain, nonatomic) id sceneMessage; // @synthesize sceneMessage=_sceneMessage;
@property(readonly, nonatomic) int currentSongType; // @synthesize currentSongType=_currentSongType;
@property(readonly, nonatomic) int prevSceneIndex; // @synthesize prevSceneIndex=m_PrevSceneIndex;
@property(readonly, nonatomic) int currentSceneIndex; // @synthesize currentSceneIndex=m_CurrentSceneIndex;
@property(readonly) BOOL isChecking; // @synthesize isChecking=m_IsChecking;
@property(readonly) BOOL currentSongIsValid; // @synthesize currentSongIsValid=m_CurrentSongIsValid;
@property(readonly, nonatomic) NSDictionary *sodemakuDictionary; // @synthesize sodemakuDictionary=m_SodemakuDictionary;
@property(readonly, nonatomic) NSDictionary *musicDictionary; // @synthesize musicDictionary=m_MusicDictionary;
@property(readonly, nonatomic) int gameResultRendaCount; // @synthesize gameResultRendaCount=m_GameResultRendaCount;
@property(readonly, nonatomic) BOOL gameResultDailyRecord; // @synthesize gameResultDailyRecord=m_GameResultDailyRecord;
@property(readonly, nonatomic) BOOL gameResultNewRecord; // @synthesize gameResultNewRecord=m_GameResultNewRecord;
@property(readonly, nonatomic) BOOL gameResultFullCombo; // @synthesize gameResultFullCombo=m_GameResultFullCombo;
@property(readonly, nonatomic) int gameResultKanpekiFailed; // @synthesize gameResultKanpekiFailed=m_GameResultKanpekiFailed;
@property(readonly, nonatomic) int gameResultMeterMax; // @synthesize gameResultMeterMax=m_GameResultMeterMax;
@property(readonly, nonatomic) int gameResultMeterLimit; // @synthesize gameResultMeterLimit=m_GameResultMeterLimit;
@property(readonly, nonatomic) int gameResultMeter; // @synthesize gameResultMeter=m_GameResultMeter;
@property(readonly, nonatomic) int gameResultHitRate; // @synthesize gameResultHitRate=m_GameResultHitRate;
@property(readonly, nonatomic) int gameResultMaxCombo; // @synthesize gameResultMaxCombo=m_GameResultMaxCombo;
@property(readonly, nonatomic) int gameResultScore; // @synthesize gameResultScore=m_GameResultScore;
@property(readonly, nonatomic) int gameResultDonPoints; // @synthesize gameResultDonPoints=m_GameResultDonPoints;
@property(readonly, nonatomic) int playerNextClass; // @synthesize playerNextClass=m_PlayerNextClass;
@property(readonly, nonatomic) int playerLevel; // @synthesize playerLevel=m_PlayerLevel;
@property(nonatomic) BOOL autoMode; // @synthesize autoMode=m_autoMode;
@property(readonly) float loadProgressSongInfo; // @synthesize loadProgressSongInfo=m_loadProgressSongInfo;
@property(readonly) BOOL loadedSongInfo; // @synthesize loadedSongInfo=m_loadedSongInfo;
@property(nonatomic) int sceneArgument; // @synthesize sceneArgument=m_SceneArgument;
@property(readonly, nonatomic) int currentCourse; // @synthesize currentCourse=m_CurrentCourse;
@property(readonly, nonatomic) NSArray *songInfoArray; // @synthesize songInfoArray=m_SongInfoArray;
@property(readonly, nonatomic) NSString *collaboDirectoryPath; // @synthesize collaboDirectoryPath=m_CollaboDirectoryPath;
@property(readonly, nonatomic) NSString *songDirectoryPath; // @synthesize songDirectoryPath=m_SongDirectoryPath;
- (id)encryptByBlowfish:(id)arg1 secretKey:(id)arg2 ivOut:(id *)arg3;
- (BOOL)hasName;
- (void)setupRenderer:(BOOL)arg1;
- (void)loadMovableCollaboJSON;
- (void)loadSongAdditionalInfoJSON;
- (void)loadSodemakuXML;
- (void)updateCollaboInfo:(id)arg1;
- (id)convertCollaboInfo:(id)arg1;
- (void)saveCollaboInfo:(id)arg1;
- (id)loadCollaboInfo;
- (int)getPackSortNumberWithCollaboPriority:(int)arg1;
- (void)addCollaboSongs;
- (void)removeAndCheckCollabos:(BOOL)arg1 dontRemove:(BOOL)arg2;
- (BOOL)convertCollaboInfoToPurchasedPackageInfo:(id)arg1;
- (id)songInfoArrayFromCollaboPackageDictionary:(id)arg1;
- (BOOL)skipRemovingCollabo:(id)arg1;
- (id)collaboWithID:(id)arg1;
- (id)collaboWithSongID:(id)arg1;
- (void)setRemoveCollaboFlag:(id)arg1;
- (BOOL)checkUpdatedCollaboExercise:(BOOL)arg1 isImageCompleteExercise:(BOOL)arg2;
- (BOOL)checkImageCompleteAllExercise:(id)arg1;
- (BOOL)checkImageCompleteAllCollaboExercise;
- (void)startDownloadingImage:(id)arg1 object:(id)arg2 filePath:(id)arg3 type:(unsigned int)arg4;
- (id)replaceCollaboParamString:(id)arg1;
- (void)startCheckingNeoCollaboInfo:(BOOL)arg1;
- (id)getInfoPageURL;
- (void)setInfoPageAutoOpen:(BOOL)arg1;
- (BOOL)isInfoPageAutoOpened;
- (BOOL)canOpenInfoPage;
- (void)startCheckingInfoPageURL;
- (void)startCheckingServerRenewalInfo;
- (void)startCheckingCurrentSong;
@property(readonly, nonatomic) NSString *lastRunVersion;
- (void)saveCurrentVersion;

@property(nonatomic) int dontamaChallengeCourse;
@property(assign,nonatomic) NSString *dontamaChallengeSong;
@property(assign,nonatomic) NSString *dontamaChallengeKey;
@property(nonatomic) int dontamaChallengePoint;
@property(nonatomic) int dontamaChallengeTicket;
@property(nonatomic) int dontamaChallengeState;
@property(nonatomic) int preservedDontamaPoint;
- (unsigned long long)nameNumber;
@property(nonatomic) int downloadDataState;
- (int)gameResultNumJudge:(int)arg1;
- (void)didFirstBootWithTaikoCore;
- (BOOL)isFirstBootWithTaikoCore;
@property(readonly, nonatomic) double timestamp;
- (BOOL)isDownloadedPackage:(id)arg1;
@property(nonatomic) int preservedBonuspoint;
- (void)registerGameResultScore:(int)arg1 maxCombo:(int)arg2 hitCount:(int)arg3 maxHitCount:(int)arg4 meter:(int)arg5 meterLimit:(int)arg6 meterMax:(int)arg7 kanpekiFailed:(BOOL)arg8 numRyo:(int)arg9 numKa:(int)arg10 numFuka:(int)arg11 rendaCount:(int)arg12;
- (void)calcDontamaWithRate:(int)arg1 fullCombo:(BOOL)arg2 maxCombo:(int)arg3 purchased:(BOOL)arg4 course:(int)arg5 difficulty:(int)arg6;
- (id)getSongInfoWithID:(id)arg1;
- (id)currentSongID;
- (id)currentSongInfo;
- (void)setCurrentSong:(id)arg1 course:(int)arg2;
- (void)setCurrentSong:(id)arg1 course:(int)arg2 type:(int)arg3;
- (void)startScene;
- (void)nextSceneDidLoad;
- (void)update;
- (void)layoutSubviews;
- (void)render;
- (void)renderLast;
- (void)stop;
- (void)start;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1 options:(id)arg2;
- (void)registerRemoteNotification;
- (id)platform;
- (void)threadLoadSongInfo;
- (void)moveDownloadData;

- (id)addSongAtPath:(id)arg1 packageID:(id)arg2 length:(unsigned long)arg3 checkSum:(unsigned long)arg4 packsortnum:(unsigned long)arg5 purchased:(BOOL)arg6;
@end

